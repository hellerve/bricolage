(deftype (Thunk a) [
  f (Fn [] a)
  res (Maybe a)
])

(defmodule Thunk
  (defn force [a]
    (match-ref (res a)
      (Maybe.Just elem) @elem
      (Maybe.Nothing)
        (let-do [res (~(f a))]
          (set-res! a (Maybe.Just res))
          res)))

  (defn str [a] (str (force a)))
  (defn prn [a] (str (force a)))

  ;(defn ref-thunk [a] (force a))
  ;(implements ref ref-thunk)
)

(defmacro lazy [form]
  `(Thunk.init (fn [] %form) (Maybe.Nothing)))

(defn main []
  (let-do [x (lazy (do (println* "inside lazy") 1))]
    (println* "not evald")
    (println* &x)
    (println* &x)))
