(deftype (LazySeq a) [
  value a
  next- (Fn [&a] a)
])

(defmodule LazySeq
  (defn next-seq [s]
    (let [n (~(next- s) (value s))]
      (LazySeq.init n @(next- s))))
)

(defn main []
  (let-do [counter (LazySeq.init 0 (fn [i] (Int.inc @i)))]
    (while (< @(LazySeq.value &counter) 10)
      (set! counter (LazySeq.next-seq &counter)))
    (println* (LazySeq.value &counter))))
