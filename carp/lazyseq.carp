(deftype (Stream a) [
  value a
  next (Fn [&a] (Maybe a))
])

(defmodule Stream
  (defn infinite [value next] (init value (fn [x] (Maybe.Just (next x)))))
  (defn from-zero [next] (init (zero) next))
  (defn from-zero-infinite [next] (init (zero) (fn [x] (Maybe.Just (next x)))))
  (defn from-array [a]
    (init
      (Pair.init 0 (zero))
      (fn [p]
        (let [n @(Pair.a p)]
          (Maybe.apply (Array.nth &a n) &(fn [v] (Pair.init (inc n) v)))))))

  (defn advance! [s]
    (let [n (~(next s) (value s))]
      (Maybe.apply n &(fn [v] (do (set-value! s @&v) v)))))

  (defn take-at-most! [s n]
    (let-do [l []
             taken 0]
      (while (< taken n)
        (match (advance! s)
          (Maybe.Nothing) (break)
          (Maybe.Just v)
            (do
              (set! taken (inc taken))
              (set! l (Array.push-back l v)))))
      l))

  (defn take [s n]
    (let [l (take-at-most! &s n)]
      (if (= (Array.length &l) n)
        (Maybe.Just (Pair.init s l))
        (Maybe.Nothing))))

  (defn drop! [s n]
    (let-do [taken 0]
      (while (< taken n)
        (match (advance! s)
          (Maybe.Nothing) (break)
          (Maybe.Just _) ()))
      ()))

  (defn drop [s n]
    (let-do [res @&s]
      (drop! &res n)
      res))

  (defn map [s f]
    (init @(value s) (fn [v] (Maybe.apply (~(next s) v) f))))
)

(defn main []
  (let-do [nats (Stream.from-zero-infinite (fn [i] (Int.inc @i)))
           decimal (Stream.take-at-most! &nats 10)
           doubled (Stream.map &nats &(fn [x] (* x 2)))
           next-ten (Stream.take-at-most! &doubled 10)]
    (println* &decimal) ; => [1 2 3 4 5 6 7 8 9 10]
    (println* &next-ten))) ; => [22 46 94 190 382 766 1534 3070 6142 12286]
