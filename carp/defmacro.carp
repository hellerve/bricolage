(defndynamic replacerfn [arg]
  (let [obs (Symbol.str arg)]
    (if (= "!" (String.prefix obs 1))
      [(gensym-with arg) (Symbol.from (String.suffix obs 1))]
      [arg arg])))

(defndynamic generate-let [acc replacer]
  (append acc [(list 'quote (car replacer)) (cadr replacer)]))

(defndynamic generate-reverse-let [acc replacer]
  (append acc [(cadr replacer) (list 'quote (car replacer))]))

(defmacro defmacro! [name args body]
  (let [replacer (map replacerfn args)
        args (collect-into (map cadr replacer) array)
        replacer (filter (fn [x] (/= (car x) (cadr x))) replacer)]
      (eval
        `(defmacro %name %args
          %(list 'list '(quote let) (reduce generate-let [] replacer)
            (list 'let (reduce generate-reverse-let [] replacer)
                body))))))
